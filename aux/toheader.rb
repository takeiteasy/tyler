require 'json'
require 'optparse'

pathToJSON = nil
outputName = "DefaultMask"
opts = OptionParser.new do |o|
  o.banner = " Usage: #{$0} -i [path] [other args...]"
  o.on '-h', '--help', 'Prints help' do
    puts o
    exit
  end
  o.on '-i', '--in PATH', String, 'Path to JSON file' do |path|
    unless File.exist? path
      puts "No file at '#{path}'"
      puts o
      abort
    end
    pathToJSON = path
  end
  o.on '-n', '--name NAME', String, 'Change the name of the output' do |name|
    outputName = name
  end
end
opts.parse!

unless pathToJSON
  puts "No JSON path supplied, see -i/--in"
  puts opts
  abort
end

masks = JSON.load(File.open(pathToJSON, 'r'))
unless masks.key? "masks"
  puts "ERROR: Invalid JSON file"
  abort
end
masks = masks["masks"]

puts <<HEADER
/*
 This file was generated by https://github.com/takeiteasy/tyler/blob/master/aux/toheader.rb

 The MIT License (MIT)

 Copyright (c) 2024 George Watson

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without restriction,
 including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

HEADER

puts "#ifndef TY_MASK_#{outputName}"
puts "#define TY_MASK_#{outputName}"
puts '#include "ty.h"'
puts "void tyLoad#{outputName}(tyState *state);"
puts "#endif // TY_MASK_#{outputName}"
puts
puts "#ifdef TY_MASK_IMPLEMENTATION"
puts "static const tyPoint #{outputName}[256] = {"
(0..255). each do |i|
  is = i.to_s
  if masks.key? is
    puts "\t[#{i}] = (tyPoint){#{masks[is]['x']}, #{masks[is]['y']}},"
  else
    puts "\t[#{i}] = (tyPoint){-1,-1},"
  end
end
puts "};"
puts
puts "void tyLoad#{outputName}(tyState *state) {"
puts "\tmemcpy(&state->map, &#{outputName}, 256 * sizeof(tyPoint));"
puts "}"
puts "#endif // TY_MASK_IMPLEMENTATION"
